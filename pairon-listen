#!/bin/bash
set -e
shopt -s huponexit

source common.sh

LOCAL="${1-.}"

setrepo "$LOCAL"

lock_file="$GIT_DIR/.listen"
if [ -f "$lock_file" ]; then
  die "Already listening on this repo ($lock_file)"
fi
echo $$ > "$lock_file"
trap 'trap - TERM && rm -f "$lock_file"' INT TERM EXIT

REMOTE="$(git remote get-url origin)"
SSH_HOST="${REMOTE%%:*}"
REMOTE_FILE="${REMOTE#*:}"

grep -q : <<<"$REMOTE" && ssh_mode="ssh $SSH_HOST -- "

autosync() {
  (cd "$GIT_WORK_TREE"
    export -f sync_patch sync_commit
    inotifywait -mrq -e "modify,delete,move" --exclude '(.pairon|.git)' . \
      | stdbuf -eL -oL sed 's/ [A-Z,_]* //' \
      | xargs -L1 -I% sh -c 'sync_patch "%"'
  )
}

start_push() {
  info "Pushing"
  touch "$CONSUME_FILE"
  trap "rm -f $CONSUME_FILE" EXIT
  while true; do
    tail -f -n0 "$CONSUME_FILE" | $ssh_mode "$REMOTE_FILE/bare-listen" "$REMOTE_FILE/.." || {
      warn "Push failed, rebasing"
      sync_force "$LOCAL" || true
    }
  done
}

start_pull() {
  info "Listening"
  $ssh_mode tail -f -n0 "$REMOTE_FILE/produce" | while read -r -d '' patch; do
    echo >&2 "=== START PULLING PATCH ==="
    echo >&2 "$patch"
    echo >&2 "=== END PULLING PATCH ==="

    hash=$(head -n1 <<<"$patch" | grep -oE " [a-f0-9]{40} ")

    if git rev-list --quiet -n1 $hash; then
      info "Patch already applied, skipping"
    elif git am <<<"$patch"; then
      info "Applied patch successfully"
    else
      git am --abort || true
      info "Apply patch failed, rebasing"
      sync_force "$LOCAL" || true
    fi
  done
}

sync_force "$LOCAL"

start_pull &
echo $! >> "$lock_file"
start_push &
echo $! >> "$lock_file"
autosync &
echo $! >> "$lock_file"

wait
