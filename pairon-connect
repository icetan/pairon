#!/bin/sh
set -e

# shellcheck source=common.sh
. "$(dirname "$(realpath "$0")")/common.sh"

connect() {
  setrepo "$1"
  git remote add origin "$2/.pairon" 2>/dev/null \
    || git remote set-url origin "$2/.pairon" 2>/dev/null
  git push -u origin master >/dev/null 2>&1
}

REMOTE="${1}"
LOCAL="${2-.}"

if test -n "$REMOTE"; then
  REMOTE_FILE="${REMOTE#*:}"
  echo "$REMOTE" | grep -q : && ssh_mode="ssh ${REMOTE%%:*} -- "

  $ssh_mode test -d "$REMOTE_FILE" || remote_empty=1
  test -d "$LOCAL" && test -n "$(find "$LOCAL"/* -maxdepth 0 2>/dev/null)" || local_empty=1

  if test -n "$local_empty" && test -n "$remote_empty"; then
    pairon init "$REMOTE"
    pairon clone "$REMOTE" "$LOCAL"
  elif test -z "$local_empty" && test -n "$remote_empty"; then
    pairon init --no-commit "$REMOTE"
    pairon path >/dev/null || pairon init "$LOCAL"
    connect "$LOCAL" "$REMOTE"
  elif test -n "$local_empty" && test -z "$remote_empty"; then
    pairon clone "$REMOTE" "$LOCAL"
  elif test -z "$local_empty" && test -z "$remote_empty"; then
    if pairon path >/dev/null; then
      die "Error: this directory is already connected.

  Remove '$(pairon path)/.pairon' to connect to a different remote."
    fi
    dest="$(mktemp -d "${TMPDIR:-/tmp}"/pairon.XXXXXXXX)"
    pairon clone "$REMOTE" "$dest"
    mv "$dest/.pairon" "$LOCAL/"
    rm -rf "$dest"
  fi
fi

pairon listen "$LOCAL"
