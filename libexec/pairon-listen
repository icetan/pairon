#!/bin/sh
set -e

USAGE='Usage: pairon-listen [OPTIONS..] [LOCAL]

Start the process that listens to local and remote changes and syncs both ways.

LOCAL - Local path to clone repo to

Options:
    --help, -h          Show this message
    --no-autosync, -n
'

# shellcheck source=lib/common.sh
. "$(dirname "$(realpath "$0")")/../lib/common.sh"

while test "$1"; do
  arg="$1";shift
  case "$arg" in
    --help|-h) usage;;
    --no-autosync|-n) no_autosync=1;shift;;
    -*) usage "'$arg' is not an option";;
    *)
      test "$LOCAL" || { LOCAL="$arg";continue; }
      usage "'$arg' is not an option";;
  esac
done

LOCAL="${LOCAL:-.}"

setrepo "$LOCAL"

lock_file="$GIT_DIR/.listen"
if test -f "$lock_file"; then
  die "Already listening on this repo ($lock_file)"
fi
echo $$ > "$lock_file"
touch "$CONSUME_FILE"
trap 'trap - TERM && rm -f "$lock_file" "$CONSUME_FILE"; kill -TERM 0' INT TERM EXIT

REMOTE="$(git remote get-url origin)"
SSH_HOST="${REMOTE%%:*}"
REMOTE_FILE="${REMOTE#*:}"

echo "$REMOTE" | grep -q : && ssh_mode="ssh $SSH_HOST -- "

autosync() {
  (cd "$GIT_WORK_TREE" || exit 1
    fsw . '\.pairon/|\.git/' \
      | xargs -I% $PAIRON_SHELL \
        -c '. "'"$LIB_DIR/sync_patch.sh"'";sync_patch "%"'
  )
}

start_push() {
  info "Pushing"
  while true; do
    tail -f -n0 "$CONSUME_FILE" | $ssh_mode "$REMOTE_FILE/bare-listen" "$REMOTE_FILE/.." || {
      warn "Push failed, rebasing"
      sync_force "$LOCAL"
    }
  done
}

start_pull() {
  info "Listening"
  $ssh_mode tail -f -n0 "$REMOTE_FILE/produce" | while IFS= read -r line; do
    if test "$line" = "___END_OF_MESSAGE___"; then
      hash="$(echo "$patch" | head -n1 | grep -oE "\\<[a-f0-9]{40}\\>")"

      echo "=== START PULLING PATCH $hash ===" >&2
      echo "$patch" >&2
      echo "=== END PULLING PATCH $hash ===" >&2

      echo "$patch" | sed -n '2s/^From: \(.*\) <\(.*\)>$/\1\n\2/p' | {
        read -r GIT_COMMITTER_NAME
        read -r GIT_COMMITTER_EMAIL
        export GIT_COMMITTER_NAME
        export GIT_COMMITTER_EMAIL
        if git rev-list --quiet -n1 "$hash" >/dev/null 2>&1; then
          info "Patch already applied, skipping"
        elif { echo "$patch" | git am --ignore-date; }; then
          info "Applied patch successfully"
        else
          git am --abort || true
          info "Apply patch failed, rebasing"
          sync_force "$LOCAL"
        fi
      }
      patch=
    else
      patch="$patch$line
"
    fi
  done
}

sync_force "$LOCAL"

(start_pull; kill -TERM 0) &
echo $! >> "$lock_file"

(start_push; kill -TERM 0) &
echo $! >> "$lock_file"

if test ! "$no_autosync"; then
  (autosync; kill -TERM 0) &
  echo $! >> "$lock_file"
fi

wait
